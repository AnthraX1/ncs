<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=GBK">
<title>单位管理</title>
    <link rel="stylesheet" type="text/css" href="/newver/resources/css/ext-all.css" /> 
        <style type="text/css">
        .icon-grid {
            background-image:url(/newver/resources/themes/images/share/grid.png) !important;
        }
        .add {
            background-image:url(/newver/resources/themes/images/share/add.gif) !important;
        }
        .option {
            background-image:url(/newver/resources/themes/images/share/plugin.gif) !important;
        }
        .remove {
            background-image:url(/newver/resources/themes/images/share/delete.gif) !important;
        }
        .exp {
            background-image:url(/newver/resources/themes/images/share/application_go.png) !important;
        }
        .accept {
            background-image:url(/newver/resources/themes/images/share/accept.png) !important;
        }
     .x-tab-default-top button, .x-tab-default-top.x-tab-inner {
		  height: 16px !important;
		  line-height: 16px;
	    }

    </style>
<style type="text/css">   
   .x-selectable, .x-selectable * {   
    -moz-user-select: text!important;   
    -khtml-user-select: text!important;   
}   
</style>
      
    <script type="text/javascript" src="/newver/resources/js/ext-all.js"></script>
    
  <script>  


Ext.Loader.setConfig({enabled: true});
Ext.Loader.setPath('Ext.ux', '/newver/ux/');
Ext.require([
    'Ext.form.*',
    'Ext.window.*',
    'Ext.grid.*',
    'Ext.data.*',
    'Ext.util.*',
    'Ext.window.MessageBox',
    'Ext.toolbar.Paging',
    'Ext.ux.PreviewPlugin',
    'Ext.tree.*',
//    'Ext.ModelManager',
//    'Ext.tip.QuickTipManager'
]);
var store;
var temp_id='';
var preid='';

 function reflash(){
  var gid=parent.document.getElementById("form1").gid.value; 
  var fcode=parent.document.getElementById("form1").fcode.value; 
   var clb;
  if(parent.document.getElementById("form1").lb){
  	 clb=parent.document.getElementById('form1').lb.value;
  }
  else{
   clb=document.getElementById('form1').lb.value;
  }

  var corpstate=parent.document.getElementById("form1").show_flag.value;  
  document.getElementById("form1").lxstate.value=corpstate;
  if(gid==''){
   if(parent.document.getElementById("form1").groupid)
     gid=parent.document.getElementById("form1").groupid.value;
  }
  var keyword1=Ext.getCmp('keyword1').value; 
  if(keyword1=='输入单位编码/名称查询'){
 		 keyword1='';
  }

//   var servicestate1=document.getElementById('form1').servicestate1.value;

  store.load({params: {lb:clb,fcode:fcode,groupid: gid,lxstate:corpstate,keyword:keyword1}});  
  }

 function setflag(sid,flag){
 
 var gid=parent.document.getElementById("form1").gid.value;   
  var corpstate=parent.document.getElementById("form1").show_flag.value;  
  var fcode=parent.document.getElementById("form1").fcode.value;   
  var keyword1=Ext.getCmp('keyword1').value; 
  if(keyword1=='输入单位编码/名称查询'){
 		 keyword1='';
  }

//   var servicestate1=document.getElementById('form1').servicestate1.value;

   store.load({params: {sid:sid,flag:flag,set:'set',groupid: gid,lxstate:corpstate,keyword:keyword1,fcode:fcode}});  
   
 
  }



 Ext.define('TreeCombox', {  
    extend: 'Ext.form.field.Picker',  
    xtype: 'treecombox',  
    triggerCls: Ext.baseCSSPrefix + 'form-arrow-trigger',  
    config: {  
        displayField: null,  
        columns: null,  
        rootVisible: false,  
        selectOnTab: true,  
        firstSelected: false,  
        maxPickerWidth: 119,  
        maxPickerHeight: 360,  
        minPickerHeight: 100  
    },  
    editable: false,  
    initComponent: function() {  
        var me = this;  
        me.callParent(arguments);  
        this.addEvents('select');  
        me.store.on('load', me.onLoad, me);  
          
    },  
    createPicker: function() {  
        var me = this,  
            picker = Ext.create('Ext.tree.Panel', {  
                store: me.store,  
                floating: true,  
                hidden: true,  
                width: me.maxPickerWidth,  
                displayField: me.displayField,  
                columns: me.columns,  
                maxHeight: me.maxTreeHeight,  
                shadow: false, 
                rootVisible:false,  
                manageHeight: false,  
                listeners: {  
                    itemclick: Ext.bind(me.onItemClick, me)  
                },  
                viewConfig: {  
                    listeners: {  
                        render: function(view) {  
                            view.getEl().on('keypress', me.onPickerKeypress, me);  
                        }  
                    }  
                }  
            }),  
            view = picker.getView();  
  
        view.on('render', me.setPickerViewStyles, me);  
        if (Ext.isIE9 && Ext.isStrict) {  
            view.on('highlightitem', me.repaintPickerView, me);  
            view.on('unhighlightitem', me.repaintPickerView, me);  
            view.on('afteritemexpand', me.repaintPickerView, me);  
            view.on('afteritemcollapse', me.repaintPickerView, me);  
        }  
        return picker;  
    },  
    setPickerViewStyles: function(view) {  
        view.getEl().setStyle({  
            'min-height': this.minPickerHeight + 'px',  
            'max-height': this.maxPickerHeight + 'px'  
        });  
    },  
    repaintPickerView: function() {  
        var style = this.picker.getView().getEl().dom.style;  
        style.display = style.display;  
    },  
    alignPicker: function() {  
        var me = this,  
            picker;  
  
        if (me.isExpanded) {  
            picker = me.getPicker();  
            if (me.matchFieldWidth) {  
                picker.setWidth(this.picker.getWidth());  
            }  
            if (picker.isFloating()) {  
                me.doAlign();  
            }  
        }  
    },  
    onItemClick: function(view, record, node, rowIndex, e) {  

  
//    	alert(record.data.id);
        this.selectItem(record);  
    },  
    onPickerKeypress: function(e, el) {  
        var key = e.getKey();  
  
        if(key === e.ENTER || (key === e.TAB && this.selectOnTab)) {  
            this.selectItem(this.picker.getSelectionModel().getSelection()[0]);  
        }  
    },  
    selectItem: function(record) {  
        var me = this; 
     document.getElementById("form1").mid.value=record.get('id');
     temp_id=record.get('id');
     me.setValue(record.get('text'));  
        me.picker.hide();  
        me.inputEl.focus();  
        me.fireEvent('select', me, record);

    },  
    onExpand: function() {  
        var me = this,  
            picker = me.picker,  
            store = picker.store,  
            value = me.value;  
        if(value) {  
            var node = store.getNodeById(value);  
            if(node)  
                picker.selectPath(node.getPath());  
        } else {  
            var hasOwnProp = me.store.hasOwnProperty('getRootNode');  
            if(hasOwnProp)  
                picker.getSelectionModel().select(store.getRootNode());  
        }  
  
        Ext.defer(function() {  
            picker.getView().focus();  
        }, 1);  
    },  
    setValue: function(value) {  
        var me = this,record;  
        me.value = value;  
        if (me.store.loading) {  
            return me;  
        }  
        try{  
            //var hasOwnProp = me.store.hasOwnProperty('getRootNode');  
            //record = value ? me.store.getNodeById(value) : (hasOwnProp ? me.store.getRootNode() : null);  
            //me.setRawValue(record ? record.get(this.displayField) : '');  
            var i = value.indexOf(">");
            var j = value.indexOf("</");
            if(i != -1 && j != -1)
            {
            		me.setRawValue(value.substring(i+1,j));
            }
            else 
            {
            		me.setRawValue(value);
            }
        }catch(e){  
            me.setRawValue('');  
        }  
  
        return me;  
    },  
    getValue: function() {  
        return this.value;  
    },  
    onLoad: function(store,node,records) {  
        var value = this.value;  
        if (value) {  
            this.setValue(value);  
        }else{  
            if(this.firstSelected){  
                if(records && records.length > 0){  
                    var record = records[0];  
                    this.setValue(record.get(this.valueField));  
                }  
            }  
        }  
    },  
    getSubmitData: function() {  
        var me = this,  
            data = null;  
        if (!me.disabled && me.submitValue) {  
            data = {};  
            data[me.getName()] = '' + me.getValue();  
        }  
        return data;  
    },  
    onTriggerClick: function() {  
        var me = this;  
        //me.store.load();  
        if (!me.readOnly && !me.disabled) {  
            if (me.isExpanded) {  
                me.collapse();  
            } else {  
                me.expand();  
            }  
            me.inputEl.focus();  
        }  
    }  
});
      store_classtree=Ext.create('Ext.data.TreeStore', 
				{   
						fields: ['text'],
						autoLoad : true,
						proxy: 
						{   
							type: 'ajax',   

						url: '/pronline/Msg?FunName@ncsTreeGroup_comp_v4'  
						}  
				}
			);








    function gotoedit1(id){
         var htmlvar='<iframe src="/pronline/Msg?FunName@ncsWebDispClientAddForm_v4&userid@'+id+'&groupid@'+document.getElementById("form1").groupid.value+' scrolling="no" name="moduleIframe" frameborder="no" style="width:100%;height:600px;"></iframe>';        
         var win2 = new Ext.Window ({
                             id:"addwindow",
                             title:"增加或修改单位信息",
                             x:0,
                             y:0,
                             width:660,
                             height:600,
                             bodyPadding: 10,
                             modal:true,
                             resizable:true,
                             draggable:false,
                             html:htmlvar
                                               
         }
        )
        win2.show();
    }
//查看IP轨迹
    function gotoIP(id,cname){
      
         var htmlvar='<iframe src="/pronline/Msg?FunName@ncsWebReplace&plate@v4/ncs_user_iplist.htm&userid@'+id+'&cname@'+cname+'" scrolling="no" name="moduleIframe" frameborder="no" style="width:100%;height:100%;"></iframe>';              
         var win = new Ext.Window ({
                             id:"addwindow",
                             title:"查看IP轨迹",
                             x:0,
                             y:0,
                             width:630,
                             height:600,
                             bodyPadding: 10,
                             modal:false,
                             resizable:true,
                             draggable:false,
                             html:htmlvar
                                               
         }
        )
        win.show();
    }


Ext.define('Ext.ux.grid.plugin.RowEditing', {   
   extend: 'Ext.grid.plugin.RowEditing',   
   alias: 'plugin.ux.rowediting',    
      
   /**  
    * 是否添加记录在当前位置<br/>  
    * whether add record at current rowIndex.<br/>  
    * see {@link #cfg-addPosition}  
    * @cfg {Boolean}  
    */  
   addInPlace: false,   
      
   addPosition: 0,   
      
   /**  
    * 是否点击触发事件,0代表不触发,1代表单击,2代表双击,默认为双击.<br/>  
    * The number of clicks on a grid required to display the editor (disable:0,click:1,dblclick:2)  
    * @cfg {Number}  
    */  
   clicksToEdit:2,   
      
   /**  
    * 是否在取消编辑的时候自动删除添加的记录  
    * if true, auto remove phantom record on cancel,default is true.  
    * @cfg {Boolean}  
    */  
   autoRecoverOnCancel: true,   
      
   /**  
    * adding flag  
    * @private  
    * @type Boolean  
    */  
   adding: false,   
      
   autoCancel:true,   
      
   /**  
    * when add record, hide error tooltip for the first time  
    * @private  
    * @type Boolean  
    */  
   hideTooltipOnAdd: true,   
      
   /**  
    * register canceledit event && relay canceledit event to grid  
    * @param {Ext.grid.Panel} grid  
    * @override  
    * @private  
    */  
   init:function(grid){   
       var me = this;   
       /**  
        * 取消编辑事件.<br/>  
        * Fires canceledit event.And will be relayEvents to Grid.<br/>  
        * @see {@link Ext.ux.grid.RowActions#event-beforeaction} <br/>  
        * @event canceledit  
        * @param {Object} context  
        */  
       me.addEvents('canceledit');   
       me.callParent(arguments);   
       grid.addEvents('canceledit');   
       grid.relayEvents(me, ['canceledit']);   
   },   
      
   /**  
    * 提供默认的Editor配置  
    *      @example  
    *      {header:'手机',dataIndex:'phone',fieldType:'numberfield',field:{allowBlank:true}}  
    * provide default field config  
    * @param {String} fieldType 可选值:numberfield,checkboxfield,passwordField  
    * @return {Object}   
    * @protected  
    */  
   getFieldCfg: function(fieldType){   
        switch(fieldType){   
            case 'passwordField':   
                return {   
                    xtype: 'textfield',   
                    inputType: 'password',   
                    allowBlank:false  
                }   
            case 'numberfield':   
                return {   
                    xtype: 'numberfield',   
                    hideTrigger: true,   
                    keyNavEnabled: false,   
                    mouseWheelEnabled: false,   
                    allowBlank:false  
                }   
                   
            case 'checkboxfield':   
                return {   
                    xtype: 'checkboxfield',   
                    inputValue: 'true',   
                    uncheckedValue: 'false'  
                }   
            }   
    },   
       
    /**  
     * Help to config field,just giving a fieldType and field as additional cfg.  
     * see {@link #getFieldCfg}  
     * @private  
     * @override  
     */  
    getEditor: function() {   
        var me = this;   
  
        if (!me.editor) {   
            Ext.each(me.grid.headerCt.getGridColumns(),function(item,index,allItems){   
                if(item.fieldType){   
                    item.field = Ext.applyIf(item.field||{},this.getFieldCfg(item.fieldType))   
                }   
            },this)   
            // keep a reference for custom editor..   
            me.editor = me.initEditor();   
        }   
        me.editor.editingPlugin = me   
        return me.editor;   
    },   
       
    /**  
     * if clicksToEdit===0 then mun the click/dblclick event  
     * @private  
     * @override  
     */  
    initEditTriggers: function(){   
        var me = this    
        var clickEvent = me.clicksToEdit === 1 ? 'click' : 'dblclick'  
        me.callParent(arguments);    
        if(me.clicksToEdit === 0){   
            me.mun(me.view, 'cell' + clickEvent, me.startEditByClick, me);    
        }   
    },   
       
    /**  
     * 添加记录  
     * add a record and start edit it (will not sync store)  
     * @param {Model/Object} data Data to initialize the Model's fields with <br/>  
     * @param {Object} config see {@link #cfg-addPosition}.   
     */  
    startAdd: function(data,config){   
        var me = this;   
        var cfg = Ext.apply({   
            addInPlace: this.addInPlace,   
            addPosition: this.addPosition,   
            colIndex: 0   
        },config)   
           
        //find the position   
        var position;   
        if(cfg.addInPlace){   
            var selected = me.grid.getSelectionModel().getSelection()   
            if(selected && selected.length>0){   
                position = me.grid.store.indexOf(selected[0])    
                console.log('a',position)   
                position += (cfg.addPosition<=0) ? 0: 1   
            }else{   
                position = 0   
            }   
        }else{   
            position = (cfg.addPosition==-1 ? me.grid.store.getCount() : cfg.addPosition) || 0   
        }   
           
        var record = data.isModel ? data : me.grid.store.model.create(data);   
        var autoSync = me.grid.store.autoSync;   
        me.grid.store.autoSync = false;   
        me.grid.store.insert(position, record);   
        me.grid.store.autoSync = autoSync;   
          
        me.adding = true  
        me.startEdit(position,cfg.colIndex);   
           
        //since autoCancel:true dont work for me   
        if(me.hideTooltipOnAdd && me.getEditor().hideToolTip){   
            me.getEditor().hideToolTip()   
        }   
    },   
       
    /**  
     * 编辑之前,自动取消编辑  
     * Modify: if is editing, cancel first.  
     * @private  
     * @override  
     */  
    startEdit: function(record, columnHeader) {   
        var me = this;   
        if(me.editing){   
            me.cancelEdit();    
        }  
 
        me.callParent(arguments);   
        Ext.getCmp('gpid').setValue(record.get('groupname'));
        temp_id=record.get('groupid');

    },   
       
    /**  
     * 修改adding的状态值  
     * Modify: set adding=false  
     * @private  
     * @override  
     */  
    completeEdit: function() {   
        var me = this;   
        if (me.editing && me.validateEdit()) {   
            me.editing = false;   
            me.fireEvent('edit', me.context);   
        }   
        me.adding = false 


        var scode=me.context.record.data.username;
        var sname=me.context.record.data.dispname;
        var scontact=me.context.record.data.contact;
        var stelphone=me.context.record.data.telphone;
        var saddress=me.context.record.data.address;
        var userid= me.context.record.data.userid;

        var gid='';

//
        if(me.context.record.data.groupname!=''){
           gid=temp_id;
        }
        var gid2=document.getElementById("form1").groupid.value;
        var corpstate=document.getElementById('form1').lxstate.value;
        var keyword1= Ext.getCmp('keyword1').value; 
        if(keyword1=='输入单位编码/名称查询'){
       		 keyword1='';
        }
      
        if(scode==''||scode=='请输入单位编号'||sname==''||sname=='请输入单位名称'||gid==''||gid=='0'){
        	alert('单位编码和单位名称不能为空和单位组不能为空');
//        	reflash();
        	return ;
        }

  //      alert(me.context.record.data.groupname);

      store.load({params: {update:"update",userid:userid,groupid1: gid,groupid:gid2,lxstate:corpstate,keyword:keyword1,username:scode,dispname:sname,address:saddress,telphone:stelphone,contact:scontact}});
  
  //      reflash();
        
         
    },   
       
    /**  
     * 取消编辑  
     * 1.fireEvent 'canceledit'  
     * 2.when autoRecoverOnCancel is true, if record is phantom then remove it  
     * @private  
     * @override  
     */  
    cancelEdit: function(){
    
        var me = this; 

        if (me.editing) {   
            me.getEditor().cancelEdit();   
            me.editing = false;   
            me.fireEvent('canceledit', me.context);    
            if (me.autoRecoverOnCancel){ 
     var temp=me.context.record.data.groupname;  
                if((me.adding)||(temp=='请输入案件编号')||(temp=='')){   
                    me.context.record.store.remove(me.context.record);   
                    me.adding = false  
                }else{   
                    //不需要reject,因为Editor没有更改record.   
                    //me.context.record.reject()   
                }   
            }   
        }  


         
    }   
}) ; 

    var rowEditing = Ext.create('Ext.ux.grid.plugin.RowEditing', {
    	      pluginId:'rowEditing', 
            saveBtnText: "保存", 
            cancelBtnText: "取消", 
            autoRecoverOnCancel:true,
            autoCancel: true
 //       clicksToMoveEditor: 1,
 //       autoCancel: false
    });




Ext.onReady(function(){



   Ext.tip.QuickTipManager.init();
//    Ext.tip.QuickTipManager.init();

    Ext.define('EimData', {
        extend: 'Ext.data.Model',
        fields: [
            'username', 'dispname', 'ip', 'endnum', 'onuser','status','ssxx','userid','version','groupname','contact','telphone','address','groupid','jrcj','clastime'
        ],
        idProperty: 'userid'
    });

    // create the Data Store
    //重写排序函数，解决远程条件查询问题
    Ext.data.Store.prototype.doSort = function() {
    	reflash();
    }
    
       store = Ext.create('Ext.data.Store', {
        pageSize: 40,
        model: 'EimData',
        remoteSort: true,
        proxy: {
            type: 'ajax',
            url: '/pronline/Msg?FunName@ncsWebClientSearch_v4&lastln@1&plate@v4/ncs_corp_list.htm',
            reader: {
                type:'json',
                root: 'eimdata',
                totalProperty: 'totalCount'
            },         
            simpleSortMode: true
        },
        sorters: [{
            property: 'addtime',
            direction: 'DESC'
        }]
    });
    store.on('beforeload', function (store, options) {
 // 	alert(parent.wireflag);
    	var wireflag=parent.wireflag;
 	  var new_params={wireflag:wireflag};
     Ext.apply(store.proxy.extraParams,new_params);
       });	

    var handleAction = function(action){
       if(action=='add'){
       var htmlvar='<iframe src="/pronline/Msg?FunName@ncsWebDispClientAddForm_v4&groupid@'+document.getElementById("form1").groupid.value+' " scrolling="no" name="moduleIframe" frameborder="no" style="width:100%;height:100%;"></iframe>';      
       var win = new Ext.Window ({
                             id:"addwindow",
                             title:"增加或修改单位信息",
                             x:0,
                             y:0,
                             width:670,
                             height:560,
                             bodyPadding: 10,
                             modal:true,
  //                         headerPosition: 'bottom',
                             resizable:true,
                             draggable:true,
                             html:htmlvar
                                                
         }
        )
        win.show();

       }
    
    };




    // pluggable renders
 //修改公司信息
    function editcorp(value,p,record){
            return Ext.String.format('<a href="#xxm" onclick="gotoedit1({0})">修改</a>',record.getId());
                
    }
   function ipgj(value,p,record){
        var temp_disp=record.data.dispname;
       return Ext.String.format( '<a href="#xxm" onclick=gotoIP("{0}","{1}")>IP轨迹</a>',record.getId(),temp_disp);
      
    }
    
    


    var pluginExpanded = true;
    
    var sm = Ext.create('Ext.selection.CheckboxModel',{
        listeners: {
            selectionchange: function(sm, selections) {
           
            grid.down('#removeButton').setDisabled(selections.length == 0);
             grid.down('#moveButton').setDisabled(selections.length == 0);
                
            }
        }
    
    });
    
    
 //查询  
 
     Ext.define('State', {
        extend: 'Ext.data.Model',
        fields: [
            {type: 'string', name: 'groupid'},
            {type: 'string', name: 'groupname'}
        ]
    });
   
 
      var store_group = Ext.create('Ext.data.Store', {
        model: 'State',
        remoteSort: true,
         proxy: {
            type: 'ajax',
            url: '/pronline/Msg?FunName@ncsWebGroupComp',
            reader: {
                type:'json',
                root: 'corpclassdata'              
            },         
            simpleSortMode: true
        }
    });
    store_group.load();     
      var groupCombo = Ext.create('Ext.form.field.ComboBox', {
        fieldLabel: '单位属组',
        valueField:'groupid',
        value:'',
        displayField: 'groupname',
        name : 'groupid1',      
        allowBlank: true,
//        forceSelection: true,
        store: store_group,
        triggerAction: 'all',
//      queryMode:'remote',
         queryMode: 'local',
         typeAhead: true
    });
    

    
    
    
    
    var fuzt = [
        {"groupid":"","groupname":"全部"},
        {"groupid":"1","groupname":"装机营业"},
        {"groupid":"2","groupname":"勒令停业"},
        {"groupid":"3","groupname":"暂停营业"},
        {"groupid":"4","groupname":"拆机"},
        {"groupid":"5","groupname":"维护状态"},
        {"groupid":"9","groupname":"其他"}
    ];
    var store_fuzt = Ext.create('Ext.data.Store', {
        model: 'State',
        data: fuzt
    });
     var fwztCombo = Ext.create('Ext.form.field.ComboBox', {
        fieldLabel: '服务状态',
        valueField:'groupid',
        displayField: 'groupname',
        name : 'servicestate',      
        value:'',
        allowBlank: true,
        forceSelection: false,
        store: store_fuzt,
        queryMode: 'local',
        typeAhead: true
    });
    
  

  
//对翻页工具条重新构建，替换翻页函数    
  Ext.PagingToolbar1 = Ext.extend(Ext.PagingToolbar, {
     doRefresh:function(){  
     reflash();
    },
    moveLast:function(){
    	var b=this,a=b.getPageData().pageCount;
    	if(b.fireEvent("beforechange",b,a)!==false){
    	store.currentPage=a;
    	reflash();
       }},
     moveFirst:function(){
      if(this.fireEvent("beforechange",this,1)!==false){
      store.currentPage=1;
      reflash();}}, 
     movePrevious:function(){var b=this,a=b.store.currentPage-1;if(a>0){if(b.fireEvent("beforechange",b,a)!==false){store.currentPage=a;reflash();}}},
     moveNext:function(){var c=this,b=c.getPageData().pageCount,a=c.store.currentPage+1;if(a<=b){if(c.fireEvent("beforechange",c,a)!==false){store.currentPage=a;reflash();}}},
      
      
      onPagingKeyDown:function(i,h){
     var d=this,b=h.getKey(),c=d.getPageData(),a=h.shiftKey?10:1,g;
     if(b==h.RETURN){h.stopEvent();g=d.readPageFromInput(c);
        if(g!==false){
         g=Math.min(Math.max(1,g),c.pageCount);
         if(d.fireEvent("beforechange",d,g)!==false){
        //d.store.loadPage(g)
         d.store.currentPage=g;
         reflash();
        }        
      }
    }
    else{
       if(b==h.HOME||b==h.END){
    			h.stopEvent();g=b==h.HOME?1:c.pageCount;i.setValue(g)
       }
       else{
         if(b==h.UP||b==h.PAGEUP||b==h.DOWN||b==h.PAGEDOWN){
          h.stopEvent();g=d.readPageFromInput(c);
           if(g){
             if(b==h.DOWN||b==h.PAGEDOWN){a*=-1}
             g+=a;
             if(g>=1&&g<=c.pages){i.setValue(g)}
             }
            }
           }
         }  
      }

      
      
       
});

    var aaa=screen.width;
    if(aaa>1440) aaa=1440;
    if(aaa<1024) aaa=1024;
    aaa=aaa-241;

  var grid = Ext.create('Ext.grid.Panel', {
 //       width: aaa,
        
//        forceFit: true,
        scrollOffset: 0,
        height: 1000,
 //       title: '&nbsp;联网单位管理',
 //       iconCls: 'icon-grid',
         
        store: store,
 //       selModel: sm,
        frame:true,
       
       
       
       
        // grid columns
        columns:[
            {
            header: '操作',
            dataIndex: 'userid',
            xtype: 'actioncolumn',
            width: 60,
                    items: [{
                    icon   : '/newver/resources/themes/images/share/accept.gif',
                    tooltip: '置为维护',
                    handler: function(grid, rowIndex, colIndex) {
                        var rec = store.getAt(rowIndex);
                        var temp_flag='5';
                        var temp_sid=rec.data.userid;
                        setflag(temp_sid,temp_flag);
                        
                        
                               
                    }
                }, {
                    icon   : '/newver/resources/themes/images/share/error.gif',  // Use a URL in the icon config
                    tooltip: '置为停业',
                    handler: function(grid, rowIndex, colIndex) {
                        var rec = store.getAt(rowIndex);
                       var rec = store.getAt(rowIndex);
                        var temp_flag='4';
                        var temp_sid=rec.data.userid;
                        setflag(temp_sid,temp_flag);
                    }
                }, {
                    icon   : '/newver/resources/themes/images/share/delete.gif',  // Use a URL in the icon config
                    tooltip: '恢复正常',
                    handler: function(grid, rowIndex, colIndex) {
                        var rec = store.getAt(rowIndex);
                       var rec = store.getAt(rowIndex);
                        var temp_flag='1';
                        var temp_sid=rec.data.userid;
                        setflag(temp_sid,temp_flag);
                    }
                }],
            sortable: false
        },
        
        {
            id: 'username',
            text: "单位编码",
            dataIndex: 'username',
            hidden: false,
            width: 105,
            sortable: true,
            editor: {
           listeners: {
			          'focus':function(){
			          	 if(this.value=='请输入单位编码'){
			                this.setValue('');
			               }
			            }
			        },			    
           	allowBlank:true
           	}
        },{
            text: "单位名称",
            dataIndex: 'dispname', 
           width: 150,
            sortable: true,
            editor: {
           listeners: {
			          'focus':function(){
			          	 if(this.value=='请输入单位名称'){
			                this.setValue('');
			               }
			            }
			        },			    
           	allowBlank:true
           	}
        },{
            text: "属组",
            dataIndex: 'groupname',           
            width: 70,
            sortable: true,
            editor: {
            id: 'gpid',   
           	name: 'groupname',  
						fieldLabel: '',  
						xtype: 'treecombox', 
						width:280,
						value:'',
						valueField: 'text',  
						displayField: 'text',  
						store:store_classtree
            	
           	}
        },
        {
            text: "联系人",
            dataIndex: 'contact',
            hidden: false,
            width: 50,
            sortable: false,
            editor: {			    
           	allowBlank:true
           	}
        },
        {
            text: "联系电话",
            dataIndex: 'telphone',
            hidden: false,
            width: 70,
            sortable: false,
            editor: {			    
           	allowBlank:true
           	}
        },
        {
            text: "地址",
            dataIndex: 'address',
            hidden: false,
            hidden:true,
            width: 100,
            sortable: false,
            editor: {			    
           	allowBlank:true
           	}
        }
        ,{
            text: "出口IP",
            dataIndex: 'ip',
            hidden:true,
            width: 85,
 //          flex: 1,
            sortable: false
        } ,{
            text: "接入厂商",
            dataIndex: 'jrcj',
            hidden: true,
            width: 85,
 //          flex: 1,
            sortable: false
        }
        ,{
            text: "用户数",
            dataIndex: 'endnum',
            width: 55,
            align: 'right',
            sortable: false
        },
        {
            text: "在线用户",
            dataIndex: 'onuser',
            width: 55,
            align: 'right',
            sortable: false
        },
        {
            text: "状态",
            dataIndex: 'status',
            width: 50,
            align: 'center',
            sortable: false
        },
        {
            text: "上次联系时间",
            dataIndex: 'clastime',
            width: 120,
            align: 'center',
            sortable: false
        },
        {
            text: "IP轨迹",
            dataIndex: 'userid',
            width: 50,
            align: 'center',
            hidden:true,
            sortable: false,
            renderer: ipgj
        },
        {
          header: '编辑',
            xtype: 'actioncolumn',
            dataIndex: 'userid',
             icon: '/v4/images/edit_task.png',
            tooltip: '点击该图标进入修改单位信息界面。',
            width: 40,
            align: 'center',
            sortable: false,
            handler: function(grid, rowIndex, colIndex, actionItem, event, record, row) {
                gotoedit1(record.get('userid'));
            }

        },
        {
            text: "版本号",
            dataIndex: 'version',
            width: 80,
            align: 'center',
            sortable: true
        },
          {
            flex: 1
        }
        ],
        
        columnLines: true,
                                        
        // paging bar on the bottom
        tbar: Ext.create('Ext.PagingToolbar1', {
            store: store,
            displayInfo: true,
            displayMsg: '显示{0} - {1}条记录 共{2}条记录',
            emptyMsg: "没有记录可显示",
                                       
            items: [

             {
               xtype:'textfield',
               id:'keyword1',
               name:'keyword1',
               style:'color:#7aa7d5',
               width:'120',
               value:'输入单位编码/名称查询',
               enableKeyEvents:true,
               listeners:{
                 'focus':function(){
                 if(this.value=='输入单位编码/名称查询'){                
                    this.setValue('');
                  }
                 },
         
                 'keydown' : function(i,e){
                var aae=e.getKey() ; 
                if(aae==13){
                    var aa=Ext.getCmp('keyword1').value;
       	         
                     document.getElementById("form1").did.value='';
		                  document.getElementById("form1").groupid.value='';
		                  document.getElementById("form1").ip1.value='';
		                  document.getElementById("form1").dispname1.value='';
		                  document.getElementById("form1").servicecode1.value='';
		                  document.getElementById("form1").address1.value='';
		                  document.getElementById("form1").area1.value='';
		                   document.getElementById("form1").fcode.value='';
                      document.getElementById("form1").servicestate1.value='';
                      document.getElementById("form1").lb.value='';
		                  store.currentPage=1;
		                   reflash();
                }
               }
               }
             },
             {
                text:'确认',
                iconCls:'accept',
                handler: function(){

                 var aa=Ext.getCmp('keyword1').value;
                if(aa!='输入单位编码/名称查询'){
       
                  document.getElementById("form1").did.value='';
                  document.getElementById("form1").groupid.value='';
                  document.getElementById("form1").ip1.value='';
                  document.getElementById("form1").dispname1.value='';
                  document.getElementById("form1").servicecode1.value='';
                  document.getElementById("form1").address1.value='';
                  document.getElementById("form1").area1.value='';
                  
                  document.getElementById("form1").fcode.value='';
                  document.getElementById("form1").servicestate1.value='';
                  document.getElementById("form1").lb.value='';
                  store.currentPage=1;         
                   reflash();
                }
                }
            },
            /*
//
//            {
//                text:'高级',
//                anchor: 'right',

//                handler: showCxForm,
//                handler: Ext.Function.pass(handleAction, 'cx'),
 //               iconCls:'option'
 //           },

 //           '-',
 //           {
 //               text:'增加',
 //               iconCls:'add',
//               handler : function() {
//                rowEditing.cancelEdit();

                
//                var r = Ext.create('EimData', {
               	  
//                    username: '请输入单位编码',
//                    dispname: '请输入单位名称'
                                   
//                });
//                
//                if(document.getElementById("form1").groupid.value!=''){
//                   preid=document.getElementById("form1").groupid.value;
              
//                }
//                temp_id=preid;
   
//            var i,lcount;
//            lcount=store_group.getCount();

 //           for(i=0;i<lcount;i++){

 //           	var record=store_group.getAt(i);

//               if(preid==record.get('groupid')){
//            	    r.data.groupid=record.get('groupname');
//            	    break;
 //              }
//            }
         
                

       
//                store.insert(0, r);

           
//              rowEditing.startEdit(0, 0);
//            }
                
                
                
    //             handler: Ext.Function.pass(handleAction, 'add')
//            }, '-', {
//                text:'删除',
//                itemId: 'removeButton',
//                iconCls:'remove',
//                disabled: true,
//                handler:function(){
             
//							   if(confirm('您真的要执行删除操作吗？')){                  
//                 var selsid;  
//                 var rows=sm.getSelection();
 //                  selsid='';
 //                 for(var i=0;i<rows.length;i++){
//                  	if(i==0){
//                  	 selsid=rows[i].getId();
//                  	}
//                  	else{
//                       selsid=selsid+","+rows[i].getId();
//                    }
                   
//                   }
//                      var gid=document.getElementById("form1").groupid.value;
//										  var ip1=document.getElementById("form1").ip1.value;
										  var dispname1=document.getElementById("form1").dispname1.value;
										  var servicecode1=document.getElementById("form1").servicecode1.value;
										  var address1=document.getElementById("form1").address1.value;
										  var area1=document.getElementById("form1").area1.value;
                      store.load({params: {del: "del",selsid:selsid,groupid: gid,ip1:ip1,dispnam1:dispname1,servicecode1:servicecode1,address1:address1,area1:area1 }});
                  
                 }  
                   
                }
 
                
            },
            
            {
            xtype:'label',
            html:'移到'
            
             },
             {
             xtype:'treecombox',
             id: 'mgroupid',  
             width:120, 
            	name: 'mgroupname',  
            	valueField: 'id',  
						  displayField: 'text',  
            	store:store_classtree
             }, {
                text:'确认',
                itemId: 'moveButton',
            
                disabled: true,
                handler:function(){
                
							   if(confirm('您真的要执行移动操作吗？')){                  
                 var selsid;  
                 var rows=sm.getSelection();
                   selsid='';
                  for(var i=0;i<rows.length;i++){
                  	if(i==0){
                  	 selsid=rows[i].getId();
                  	}
                  	else{
                       selsid=selsid+","+rows[i].getId();
                    }
                   
                   }
                      var gid=document.getElementById("form1").groupid.value;
										  var mid=document.getElementById("form1").mid.value;
										  if(mid==''){
										  alert('请选择移动目标');
										  return;
										  }
										  var keyword=Ext.getCmp('keyword1').value;
										  if(keyword=='输入单位编码/名称查询'){
										  keyword='';
										  }
										  var lxstate=document.getElementById("form1").lxstate.value;
										  
                      store.load({params: {move: "move",selsid:selsid,mid:mid,keyword:keyword,lxstate:lxstate}});
                  
                 }  
                   
                }
 
                
            }
            
            
            ,'-',
   */         
            
            {
                text:'导出',
                iconCls:'exp',
                handler:function(){

                document.getElementById('form1').export2.value='exp';
                var t_keyword=Ext.getCmp('keyword1').value;
                
                 if(t_keyword=='输入单位编码/名称查询'){
                 document.getElementById("form1").keyword.value='';
                 }
                 else{
                  document.getElementById("form1").keyword.value=Ext.getCmp('keyword1').value;
                  }
                document.getElementById("form1").submit();
               document.getElementById("form1").export2.value="";
              
                }
            }]
       

        }),
        plugins: [rowEditing],
        
        
        renderTo: 'grid-corp'
    });

    // trigger the data store load
    reflash();
 //    store.loadPage(1);

});








</script>
    
    
</head>
<body>
	<form name="form1" id="form1" action="/pronline/Msg">
		<input type="hidden" name="FunName" value="ncsWebClientSearch_v4">
		<input type="hidden" name="groupid" value="">
		<input type="hidden" name="did" value="">
		<input type="hidden" name="ip1" value="">
		<input type="hidden" name="dispname1" value="">
		<input type="hidden" name="servicecode1" value="">
		<input type="hidden" name="groupid1" value="">		
	  <input type="hidden" name="address1" value="">
		<input type="hidden" name="area1" value="">
		<input type="hidden" name="export2" value="">
		<input type="hidden" name="lxstate" value="">
	
		<input type="hidden" name="mid" value="">
		
		<input type="hidden" name="fcode" value="">
		<input type="hidden" name="servicestate1" value="">
		<input type="hidden" name="lb" value="">
		<input type="hidden" name="keyword" value="">
	</form>
    <div id="grid-corp"></div>

</body>
</html>
